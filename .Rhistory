devtools::load_all()
? %>%
?magrittr:: %>%
devtools::load_all()
devtools::check()
?magrittr:: %>%
?magrittr::`%>%`()
library(dplyr)
library(magrittr)
iris magritt:: ` %>% ` dplyr::group_by(Species) %>% dplyr::summarise(dplyr::n())
devtools::load_all()
devtools::check()
?aggregate
?sd
?mean
?colorRampPalette
?brewer.pal
?wes_palette
?tiff
?dev.off
?stat_summary
?gpar
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
library(pkgbuild)
pkgbuild::has_build_tools()
devtools::check(cran = FALSE)
library(usethis)
usethis::use_release_issue()
usethis::use_news_md()
v
usethis::use_cran_comments()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::document()
?ggplot2::theme
devtools::load_all()
devtools::document()
library(MEASPIRs)
devtools::load_all()
devtools::load_all()
spike_waveform <- function(
filt.data.path,
spike_col = "forestgreen",
scale = "free",
mean_trace = TRUE,
col_mean_trace = "black",
color_viridis = FALSE
) {
load(filt.data.path)
# Create output directory in the working directory
systime <- Sys.time()
systime <- paste0(systime, "s")
systime <- gsub(" ", "_", systime)
ix <- unlist(gregexpr("\\:", systime))
substr(systime, ix[1], ix[1]) <- "h"
substr(systime, ix[2], ix[2]) <- "m"
output.dir <- paste("outfile_waveform", systime, scale, sep = "_")
if (!(is.na(guideline$InformationFolderName[1]))) {
output.dir <- paste0(output.dir, "_", guideline$InformationFolderName[1])
} else {
output.dir <- paste0(output.dir, "_", "na")
}
if (MinFR > 0) { output.dir <- paste0(output.dir, "_MinFR", MinFR) }
dir.create(output.dir)
# Set colors for plots
colclus <- c("#F8766D", "#00BFC4", "#00BA38","#C77CFF","#A3A500","#FB61D7")
if (color_viridis) colclus <- viridis::viridis_pal()(6)
names(colclus) <- as.character(1:6)
mycol <- c(spike_col, colclus, "grey")
names(mycol) <- c("none", names(colclus), "99")
#-- Main --#
for (i in 1:nb.condition) {
cat("### condition =", i, "\n")
# Retrieve filtered dataspike + output filename and title name
dat <- get(as.character(info.cond$Filename[i]))
dat <- data.frame(spike_id = factor(rownames(dat)), dat)
start_TW <- guideline$TimeLimitStart[i]
end_TW <- guideline$TimeLimitEnd[i]
cond.nb <- guideline$ConditionNumber[i]
expgrp <- guideline$ExperimentalGroup[i]
expcond <- guideline$ExperimentalCondition[i]
TeX <- info.cond$TeX[i]
spike.sorting  <- info.cond$spike.sorting[i]
index  <- info.cond$index[i]
cutoff  <- info.cond$cutoff[i]
shortname <- info.cond$ShortFilename[i]
name <- paste0(shortname, "_C_", cond.nb, "_", expgrp, "_", expcond,
"_TW_", start_TW, "-", end_TW, "_TeX_", TeX,
"_MinFR_", MinFR)
if (spike.sorting) name <- paste0(name, "_index_", index, "_", "cutoff", "_", gsub("\\.", "", cutoff))
name <- paste0(name, ".pdf")
if ( info.cond$empty.file[i] ) { # If empty file output void plots
plot_list <- list()
nc <- 1
for (j in 1:nb.electrode) {
plot_list[[nc]] <- MEASPIRs:::draw_void_plot(j, 1)
nc <- nc + 1
}
glist <- lapply(plot_list, ggplotGrob)
# Use width = 210, height = 297, units = "mm" for A4 size document
ggplot2::ggsave(filename = paste0(output.dir, "/", name),
gridExtra::marrangeGrob(glist, nrow = 4, ncol = 3, widths = c(1, 1, 1),
layout_matrix = matrix(1:12, 4, 3, TRUE),
bottom = quote(grid::textGrob(paste("\n", "page", g, "of", npages, "\n"),
x = .5, hjust = .5)),
top = paste("\n", name, "\n"),
left = "\n", right  = "\n"),
width = 210, height = 297, units = "mm")
} else {  # If not empty file ...
# spikes_nbr <- as.data.frame(table(dat$channel))
# colnames(spikes_nbr) <- c("channel","nbr")
# spikes_nbr <- spikes_nbr[ spikes_nbr$channel %in% ix.ch, ]
plot_list <- list()
nc <- 1
# List of analyzed channels (channels to keep)
if (length(guideline[ i, "removeChannel" ]) == 0) an.ch <- 1:nb.electrode
if (length(guideline[ i, "removeChannel" ]) > 0) {
ix.rm.ch <- unlist(strsplit( guideline[ i, "removeChannel" ], split = ","))
ix.rm.ch <- as.numeric(ix.rm.ch)
an.ch <- setdiff(1:nb.electrode, ix.rm.ch)
an.ch <- sort(unique(an.ch))
}
bounds <- range(dat[, grep("_mV", colnames(dat)) ])
for (j in 1:nb.electrode) {
cat("# ch =", j, "\n")
if ( !(j %in% an.ch) ) {
plot_list[[nc]] <- MEASPIRs:::draw_void_plot(j, 2)
} else {
if ( sum(dat$channel == j) == 0 ) {
plot_list[[nc]] <- MEASPIRs:::draw_void_plot(j, 1)
} else {
tmp <- dat[ dat$channel == j, ]
channel.label <- paste0("channel ", names(table(tmp$channel)), ", n=", table(tmp$channel))
ldat <- reshape2::melt(data = tmp[ tmp$channel == j, ],
id.vars = c("spike_id", "channel", "time_of_day", "within_session_time", "within_session_time_ms",
"within_trace_time_ms", "cluster_id", "trace_num", "pre_ms", "post_ms"))
levels(ldat$variable) <- c(0:70)/20-1
ldat$time <- as.numeric(as.character(ldat$variable))
p <- ggplot2::ggplot(data = ldat) +
ggplot2::geom_line(ggplot2::aes(x = time, y = value, group = spike_id, color = factor(cluster_id)), size = .1) +
ggplot2::scale_colour_manual(values = mycol) +
ggplot2::scale_x_continuous(breaks = seq(-1, 2.5, .5), limits = c(-1, 2.5)) +
ggplot2::theme_bw() +
ggplot2::theme(
plot.title = ggplot2::element_text(size = 7, hjust = 0.5),
axis.text = ggplot2::element_text(size = 7, color = "black"),
#axis.title = ggplot2::element_blank(),
legend.position = "none",
panel.grid.major.y = ggplot2::element_blank(),
panel.grid.minor.y = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(color = "gray92", size = .1),
panel.grid.minor.x = ggplot2::element_line(color = "gray95", size = .1),
panel.border = ggplot2::element_rect(colour = "black", fill = NA, linewidth = .4),
axis.ticks = ggplot2::element_line(colour = "gray10", size = .3),
axis.ticks.length = ggplot2::unit(.15, "cm"),
axis.line = ggplot2::element_line(colour = "black", size = .4)
) +
ggplot2::ggtitle(channel.label) +
ggplot2::labs(x = "Time (ms)",
y = "Amplitude (ÂµV)")
if (mean_trace == TRUE) {
p <- p + ggplot2::stat_summary(ggplot2::aes(x = time, y = value, group = cluster_id),
color = col_mean_trace,
fun = mean, geom = "line")
}
if (scale == "fixed") {
p <- p + ggplot2::scale_y_continuous(limits = bounds)
}
plot_list[[nc]] <- p
}
}
nc <- nc + 1
} # End if_else_else
#-- Save all plots in a pdf file (8 plots per page) --#
glist <- lapply(plot_list, ggplotGrob)
# Use width = 210, height = 297, units = "mm" for A4 size document
# p_final <- plot_grid(plotlist = plot_list, ncol = 8, nrow = 8)
title <- grid::textGrob(paste("\n", name, "\n"), gp = grid::gpar(cex = .7))
ggplot2::ggsave(filename = paste0(output.dir, "/", name),
gridExtra::marrangeGrob(glist, nrow = 4, ncol = 3, widths = c(1, 1, 1),
layout_matrix = matrix(1:12, 4, 3, TRUE),
bottom = quote(grid::textGrob(paste("\n", "page", g, "of", npages, "\n"),
x = .5, hjust = .5)),
top = title,
left = "\n", right  = "\n"),
width = 210, height = 297, units = "mm")
} # End If not empty file
} # End_For_Conditions
guideline.filename <- paste("MEA_Spike_ANA_R_guideline", systime, sep = "_")
openxlsx::write.xlsx(guideline, paste0(output.dir, "/", guideline.filename, ".xlsx"))
} # FUNCTION END_MEA_2_SPIKEWAVEFORM
devtools::load_all()
devtools::load_all()
devtools::document()
?MEASPIRs::spike_waveform
devtools::document()
?MEASPIRs::ISI
devtools::document()
?MEASPIRs::spikeraster_heatmap
devtools::document()
?MEASPIRs::spike_detection_rate
devtools::document()
?MEASPIRs::firing_rate
devtools::document()
?MEASPIRs::burst_detection
devtools::load_all()
?MEASPIRs::spike_waveform
devtools::load_all()
?ggpubr::ggarrange
64/12
devtools::document()
devtools::load_all()
?MEASPIRs::spike_waveform
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
is(5>6)
5 = 6
6>5
5>6
devtools::load_all()
MEASPIRs::dataset_filtering
devtools::load_all()
devtools::load_all()
?MEASPIRs::dataset_filtering
?save
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
?setdiff
setdiff(c(1,2,3),c(1,2,3,4,5))
x <- c(sort(sample(1:20, 9)), NA)
x
y <- c(sort(sample(3:23, 7)), NA)
y
setdiff(x, y)
devtools::load_all()
devtools::check()
?MEASPIRs::dataset_filtering()
devtools::document()
?MEASPIRs::dataset_filtering
?MEASPIRs::burst_detection()
devtools::document()
devtools::document()
?MEASPIRs::dataset_filtering
?MEASPIRs::spike_waveform
devtools::load_all()
devtools::document()
?MEASPIRs::spike_waveform
devtools::check()
library(devtools)
devtools::load_all()
?MEASPIRs::spike_detection_rate
devtools::document()
?MEASPIRs::spike_detection_rate
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
help(package = "MEASPIRs")
library(MEASPIRs)
help(package = "MEASPIRs")
help(package = "MEASPIRs")
library(MEASPIRs, lib.loc = "C:/Users/gaspard.martet/AppData/Local/Programs/R/R-4.2.2/library")
install.packages("~/MEA/MEASPIRs_1.0.0.tar.gz", repos = NULL, type = "source", lib="C:/Users/gaspard.martet/AppData/Local/Programs/R/R-4.2.2/library")
help(package = "MEASPIRs")
detach("package:MEASPIRs", unload = TRUE)
install.packages("~/MEA/MEASPIRs_1.0.0.tar.gz", repos = NULL, type = "source", lib="C:/Users/gaspard.martet/AppData/Local/Programs/R/R-4.2.2/library")
help(package = "MEASPIRs")
?MEASPIRs::ISI
?MEASPIRs::spikeraster_heatmap
?MEASPIRs::ISI
?MEASPIRs::spike_waveform
?MEASPIRs::burst_detection
?MEASPIRs::firing_rate
?MEASPIRs::spike_detection_rate
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
?sum
?base::sum
?paste0
?base::paste0
devtools::load_all()
MEASPIRs:::detect_burst_chen(c(503,256,120,65.3,571))
MEASPIRs:::detect_burst_mi(c(503,256,120,65.3,571))
devtools::check()
devtools::load_all()
?MEASPIRs::dataset_filtering
?MEASPIRs::ISI
?MEASPIRs::dataset_filtering
library(mixOmics)
help(package = "mixOmics")
library(synergyfinder)
help(package = "synergyfinder")
devtools::document()
?MEASPIRs::dataset_filtering
devtools::document()
?MEASPIRs::dataset_filtering
devtools::load_all()
?MEASPIRs::spike_waveform
devtools::document()
?MEASPIRs::spike_waveform
?MEASPIRs::dataset_filtering
devtools::document()
?MEASPIRs::spike_waveform
devtools::document
devtools::document()
?MEASPIRs::spike_waveform
?MEASPIRs::firing_rate()
devtools::document()
devtools::document()
?MEASPIRs::firing_rate
?MEASPIRs::spike_waveform
devtools::document()
?MEASPIRs::firing_rate
devtools::load_all()
?MEASPIRs::spikeraster_heatmap
devtools::document()
?MEASPIRs::spikeraster_heatmap
?MEASPIRs::firing_rate
devtools::load_all()
devtools::document()
?MEASPIRs::spikeraster_heatmap
devtools::document()
?MEASPIRs::burst_detection
?MEASPIRs::ISI()
devtools::document()
?MEASPIRs::ISI
devtools::document()
?MEASPIRs::ISI
devtools::document()
?MEASPIRs::ISI
?MEASPIRs::spike_detection_rate()
?MEASPIRs::spike_detection_rate
devtools::document()
?MEASPIRs::spike_detection_rate
?MEASPIRs::dataset_filtering
devtools::document()
MEASPIRs::dataset_filtering()
?MEASPIRs::dataset_filtering()
?MEASPIRs::burst_detection()
?MEASPIRs::spike_waveform()
?MEASPIRs::ISI
?MEASPIRs::spike_detection_rate
?MEASPIRs::burst_detection
?MEASPIRs::firing_rate
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::load_all()
devtools::build_vignettes()
library(beepr)
beep(8)
beep(8)
devtools::build_vignettes()
library(Rcade)
Rcade::games
games::Pacman
games$Pacman
library(devtools)
devtools::check()
devtools::document()
?MEASPIRs::burst_detection
devtools::document()
devtools::check()
3*8
library(beepr)
beep(7)
devtools::load_all()
devtools::check()
devtools::check()
0.75*2059
2059-526
1533/2056
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::load_all()
devtools::check()
devtools::load_all()
?MEASPIRs::dataset_filtering
?MEASPIRs::spike_waveform
devtools::document()
devtools::document()
?MEASPIRs::spike_waveform
?MEASPIRs::firing_rate
?MEASPIRs::spikeraster_heatmap
?MEASPIRs
help(package = "MEASPIRs")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
?NbClust::NbClust
?tolower
devtools::load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
MEASPIRs::burst_detection()
?MEASPIRs::burst_detection()
devtools::document()
?MEASPIRs::burst_detection
?MEASPIRs::firing_rate()
?MEASPIRs::ISI
devtools::document
devtools::document()
?MEASPIRs::ISI
?MEASPIRs::spike_detection_rate()
?MEASPIRs::spike_waveform
?MEASPIRs::spikeraster_heatmap()
devtools::load_all()
MEASPIRs::spike_waveform()
?MEASPIRs::spike_waveform()
?MEASPIRs::dataset_filtering
devtools::load_all()
help(package = "MEASPIRs")
library(pkgbuild)
pkgbuild::has_build_tools()
devtools::check()
devtools::check(cran = FALSE)
devtools::build()
devtools::build(binary = TRUE)
help(package = "MEASPIRs")
devtools::load_all()
help(package = "MEASPIRs")
devtools::load_all()
ls()
devtools::load_all()
devtools::document()
?MEASPIRs::spike_waveform
devtools::check()
library(Rcade)
Rcade::games
games$Mariohtml5
devtools::load_all()
devtools::check()
library(MEASPIRs)
?devtools::check()
library(usethis)
usethis::use_gpl_license()
library(devtools)
devtools::load_all()
devtools::check()
devtools::build(binary = TRUE)
library(devtools)
devtools::document()
?MEASpikeR::ISI
devtools::build_vignettes()
library(MEASpikeR)
help(package = "MEASpikeR")
library(MEASpikeR)
help(package = "MEASpikeR")
detach("package:MEASpikeR", unload = TRUE)
install.packages("~/MEA/MEASpikeR_1.0.0.tar.gz", repos = NULL, type = "source", lib="C:/Users/gaspard.martet/AppData/Local/Programs/R/R-4.2.2/library")
help(package = "MEASpikeR")
library(MEASpikeR)
help(package = "MEASpikeR")
devtools::document()
devtools::build()
help(package = "MEASpikeR")
library(MEASpikeR, lib.loc = "C:/Users/gaspard.martet/AppData/Local/Programs/R/R-4.2.2/library")
detach("package:MEASpikeR", unload = TRUE)
install.packages("~/MEA/MEASpikeR_1.0.0.tar.gz", repos = NULL, type = "source", lib="C:/Users/gaspard.martet/AppData/Local/Programs/R/R-4.2.2/library")
library(MEASpikeR)
help(package = "MEASpikeR")
